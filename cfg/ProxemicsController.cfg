#! /usr/bin/env python
PACKAGE = 'proxemics'
import roslib;roslib.load_manifest(PACKAGE)

from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

# TF frame ID parameters
gen.add("world_frame_id", str_t,  SensorLevels.RECONFIGURE_RUNNING, "The TF frame ID (name) of the world.", "/world")
gen.add("robot_frame_id", str_t,  SensorLevels.RECONFIGURE_RUNNING, "The TF frame ID (name) of the robot.", "/robot/base_link")
gen.add("human_frame_id", str_t,  SensorLevels.RECONFIGURE_RUNNING, "The TF frame ID (name) of the human.", "/human/base_link")

# TF timeout parameters
gen.add("enable_tf_timeout", bool_t,   SensorLevels.RECONFIGURE_RUNNING, "Enables/Disables setting the TF timeout duration.",  True)
gen.add("tf_timeout",        double_t, SensorLevels.RECONFIGURE_RUNNING, "The TF timeout duration (in seconds).", 1.0, 0.0, 10.0)

# proxemic goal state parameters
gen.add("enable_goal_state",         bool_t,   SensorLevels.RECONFIGURE_RUNNING, "Enables/Disables setting the proxemics goal state.",  True)
gen.add("goal_range_robot_to_human", double_t, SensorLevels.RECONFIGURE_RUNNING, "The desired range/distance (in meters) from the robot to the human.", 1.5, 0.25, 5.0)
gen.add("goal_angle_robot_to_human", double_t, SensorLevels.RECONFIGURE_RUNNING, "The desired angle/bearing (in degrees) from the robot to the human.", 0.0, -180.0, 180.0)
gen.add("goal_angle_human_to_robot", double_t, SensorLevels.RECONFIGURE_RUNNING, "The desired angle/bearing (in degrees) from the human to the robot.", 0.0, -180.0, 180.0)

# min/max speed parameters
gen.add("enable_speed_limits", bool_t,   SensorLevels.RECONFIGURE_RUNNING, "Enables/Disables limiting the mininum/maximum speeds.",  True)
gen.add("min_speed_lin_x",     double_t, SensorLevels.RECONFIGURE_RUNNING, "The minimum linear-x speed (in meters/second).", 0.01, 0.0)
gen.add("max_speed_lin_x",     double_t, SensorLevels.RECONFIGURE_RUNNING, "The maximum linear-x speed (in meters/second).", 1.5, 0.0)
gen.add("min_speed_lin_y",     double_t, SensorLevels.RECONFIGURE_RUNNING, "The minimum linear-y speed (in meters/second).", 0.01, 0.0)
gen.add("max_speed_lin_y",     double_t, SensorLevels.RECONFIGURE_RUNNING, "The maximum linear-y speed (in meters/second).", 1.5, 0.0)
gen.add("min_speed_ang_z",     double_t, SensorLevels.RECONFIGURE_RUNNING, "The minimum angular-z speed (in degrees/second).", 1.0, 0.0)
gen.add("max_speed_ang_z",     double_t, SensorLevels.RECONFIGURE_RUNNING, "The maximum angular-z speed (in degrees/second).", 90.0, 0.0)

# max acceleration parameters
gen.add("enable_accel_limits", bool_t,   SensorLevels.RECONFIGURE_RUNNING, "Enables/Disables limiting the maximum acceleration.",  True)
gen.add("max_accel_lin_x",     double_t, SensorLevels.RECONFIGURE_RUNNING, "The maximum linear-x acceleration (in meters/second^2).", 0.1, 0.0)
gen.add("max_accel_lin_y",     double_t, SensorLevels.RECONFIGURE_RUNNING, "The maximum linear-y acceleration (in meters/second^2).", 0.1, 0.0)
gen.add("max_accel_ang_z",     double_t, SensorLevels.RECONFIGURE_RUNNING, "The maximum angular-z acceleration (in degrees/second^2).", 180.0, 0.0)

# max jerk parameters
gen.add("enable_jerk_limits", bool_t,   SensorLevels.RECONFIGURE_RUNNING, "Enables/Disables limiting the maximum jerk.",  True)
gen.add("max_jerk_lin_x",     double_t, SensorLevels.RECONFIGURE_RUNNING, "The maximum linear-x acceleration (in meters/second^3).", 1.0, 0.0)
gen.add("max_jerk_lin_y",     double_t, SensorLevels.RECONFIGURE_RUNNING, "The maximum linear-y acceleration (in meters/second^3).", 1.0, 0.0)
gen.add("max_jerk_ang_z",     double_t, SensorLevels.RECONFIGURE_RUNNING, "The maximum angular-z acceleration (in degrees/second^3).", 180.0, 0.0)

# linear/angular proportional (P) gain parameters
gen.add("enable_p_control", bool_t,   SensorLevels.RECONFIGURE_RUNNING, "Enables/Disables proportional (P) control.",  True)
gen.add("gain_p_lin_x",     double_t, SensorLevels.RECONFIGURE_RUNNING, "The linear-x proportional (P) gain.", 1.0, 0.0)
gen.add("gain_p_lin_y",     double_t, SensorLevels.RECONFIGURE_RUNNING, "The linear-y proportional (P) gain.", 1.0, 0.0)
gen.add("gain_p_ang_z",     double_t, SensorLevels.RECONFIGURE_RUNNING, "The angular-z proportional (P) gain.", 1.0, 0.0)

# linear/angular derivative (D) gain parameters
gen.add("enable_d_control", bool_t,   SensorLevels.RECONFIGURE_RUNNING, "Enables/Disables derivative (D) control.",  True)
gen.add("gain_d_lin_x", double_t, SensorLevels.RECONFIGURE_RUNNING, "The linear-x derivative (D) gain.", 0.0, 0.0)
gen.add("gain_d_lin_y", double_t, SensorLevels.RECONFIGURE_RUNNING, "The linear-y derivative (D) gain.", 0.0, 0.0)
gen.add("gain_d_ang_z", double_t, SensorLevels.RECONFIGURE_RUNNING, "The angular-z derivative (D) gain.", 0.0, 0.0)

exit(gen.generate(PACKAGE, "proxemics", "ProxemicsController"))
